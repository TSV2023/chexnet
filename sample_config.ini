[DEFAULT]

# output directory used for each experiment that is run using this code base
# append variable with new subdirectory for multiple runs (eg. ./experiements/1/)
output_directory=./experiments/DenseNet121

# In line with the SavedModelBuilder example within TensorFlow
# One should specify a larger integer value when exporting
# a newer version of the same model 
model_version=2

# image directory used for dataset for training model
image_source_directory=/opt/chexnet/images

# Location on filesystem to store tensorboard logs
tensorboard_log_dir=/var/log/tensorboard

# Base model name, this is defined within models/model.py
# Can be one of [VGG16, VGG19, DenseNet121, ResNet50, InceptionV3,
#                InceptionResNetV2, NASNetMobile, NASNetLarge]
base_model_name=DenseNet121

# Class names used for classification
# (eg. Alectasis,Cardiomegaly,Effusion,Infiltration,Mass,Nodule,Pneumonia,Pneumothroax,Consoliation,etc.)
class_names=Atelectasis,Cardiomegaly,Effusion,Infiltration,Mass,Nodule,Pneumonia,Pneumothorax,Consolidation,Edema,Fibrosis,Pleural_Thickening,Hernia

[KAFKA]
broker="172.23.0.5"
kafka_port=9092
kafka_topic=xray-images

[TRAIN]

# if true use imagenet pretrained weights provided by keras
use_base_model_weights=true

# if true load model weights from previous model run
# this is typically used if you want to resume training
# another model that you had previously stopped training
use_trained_model_weights=false

# use best weights that have been saved out by a previous 
# training run of this model (this is different from 
# using weights of previous run as we will differentiate
# previous epoch of previous run vs. best weights from all
# runs.

use_best_weights=true

# number of epochs to run
epochs=100

# batch size to use for each epoch
batch_size=32

# initial learning rate for model training
initial_learning_rate=1e-3

# number of workers for batch generation
# can parallelize workers for faster and 
# more efficient image generators
generator_workers=1

# desired dimensions of input image (image will be resized)
# currently supports images that are square
# TODO: Add support for image cropping and resizing
image_dimension=224

# number of steps to take during epoch
# auto or int
# if auto (total_samples / batch_size / 10) used by default
train_steps=auto

validation_steps=auto

# patience parameter used on Keras ReduceLROnPlateau 
# https://keras.io/callbacks/#reducelronplateau
# callback used when there is no decrease in loss on 
# a given epoch of the model training loop will wait 
# petience_reduce_lr number of epochs before reducing 
# the learning rate
patience_reduce_lr=1

# minimum overall learning rate
# learning rate cannot decay below min_learning_rate
min_learning_rate=1e-8

# control the class_weight ratio 0 < class_weight < 1
# higher value means higher weighting of positive samples
# default = 1 (no weighting)
positive_weights_multiply=1

# directory where the dataset csv resides
dataset_csv_dir=./data

# print model summary during training
show_model_summary=true

# Name of output weights file
output_weights_name=weight.h5

[TEST]
# test iteration parameters
batch_size=32
test_steps=auto
test_generator_random_state=1
use_best_weights=true

[CAM]
# Class activation map (CAM) parameters
bbox_list_file=./data/BBox_List_2017.csv
# use best weights from reference experiment
use_best_weights=true


